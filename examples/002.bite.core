let HPI = type #cont [#handle [HPI HPO R] #return [#unit]] ;
    HPO = type #cont [#handle [HPI HPO R] #return [#unit]] ;
    R = type #cont [#handle [HPI HPO R] !]
end

let
(pinger: HPI -> #unit) = \(hpi: HPI).
  case
    mark (hpo: HPO) in
    case
      mark (res: R) in
      goto hpi((#handle hpi hpo res))
    of
    | #handle (hpi hpo res) -> #unit
    end
  of
  | #handle (hpi hpo res) -> let _ = (pinger hpi) in goto res((#handle hpi hpo res))
  | #return (_) -> #unit
  end;

(ponger: HPO -> #unit) = \(hpo: HPO).
  case
    mark (hpi: HPI) in
    case
      mark (res: R) in
      goto hpo((#handle hpi hpo res))
    of
    | #handle (hpi hpo res) -> #unit
    end
  of
  | #handle (hpi hpo res) -> let _ = (pinger hpi) in goto res((#handle hpi hpo res))
  | #return (_) -> #unit
  end
end